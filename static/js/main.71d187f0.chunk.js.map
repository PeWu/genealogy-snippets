{"version":3,"sources":["index.tsx"],"names":["storeList","list","localStorage","setItem","JSON","stringify","retrieveList","parse","getItem","getDisplayName","person","nameForm","names","nameForms","fullText","parts","map","part","value","join","PersonLink","props","href","FactDescription","fact","type","replace","date","original","place","filter","x","PersonEntryDescription","url","style","width","Content","header","entry","facts","parents","spouses","children","siblings","extra","page","src","favicon","height","marginRight","addToMultiMap","key","get","push","set","Entry","Map","data","relationships","forEach","relationship","p1","person1","resource","substring","p2","person2","nonUniqueSiblings","child","Array","from","Set","seen","personEntries","people","persons","id","has","add","App","setList","useState","handleStorageEvent","event","useEffect","window","addEventListener","removeEventListener","console","log","color","onClick","ExtensionIframe","handleMessage","urls","added","includes","parent","postMessage","response","render","path","element","document","querySelector"],"mappings":"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","file":"static/js/main.71d187f0.chunk.js","sourcesContent":["import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { Button, Card } from 'semantic-ui-react';\nimport { DataEntry, ExtensionMessage, Page } from './data_entry';\nimport { Fact, Person } from './gedcomx';\nimport { render } from 'react-dom';\nimport { useEffect, useState } from 'react';\nimport 'fomantic-ui-css/semantic.css';\n\n/** Stores data list in local storage. */\nfunction storeList(list: DataEntry[]) {\n  localStorage.setItem('list', JSON.stringify(list));\n}\n\n/** Retrieves data list from local storage. */\nfunction retrieveList(): DataEntry[] {\n  return JSON.parse(localStorage.getItem('list') || '[]');\n}\n\nfunction getDisplayName(person: Person) {\n  const nameForm = person.names[0].nameForms[0];\n  if (nameForm.fullText) {\n    return nameForm.fullText;\n  }\n  return nameForm.parts?.map((part) => part.value).join(' ');\n}\n\n/** Returns the domain name without the www. prefix for a given URL. */\nfunction getDomain(url: string) {\n  return url.replace(/.*:\\/\\/(www\\.)?([^/]*)\\/.*/, '$2');\n}\n\nfunction PersonLink(props: { person: Person }) {\n  return (\n    <>\n      <a href=\"#\">{getDisplayName(props.person) || '[unknown]'}</a>,{' '}\n    </>\n  );\n}\n\nfunction FactDescription(props: { fact: Fact }) {\n  return (\n    <p>\n      <b>\n        {props.fact.type\n          .replace(/.*\\//g, '')\n          .replace(/([A-Z])/g, ' $1')\n          .replace(/^ /, '')}\n        :{' '}\n      </b>\n      {[props.fact.value, props.fact.date?.original, props.fact.place?.original]\n        .filter((x) => !!x)\n        .join('; ')}\n    </p>\n  );\n}\n\ninterface PersonEntry {\n  page: Page;\n  person: Person;\n  parents?: Person[];\n  children?: Person[];\n  spouses?: Person[];\n  siblings?: Person[];\n}\n\nfunction PersonEntryDescription(props: { entry: PersonEntry }) {\n  return (\n    <Card style={{ width: 500 }}>\n      <Card.Content\n        header={getDisplayName(props.entry.person) || '[unknown]'}\n        style={{ width: 500 }}\n      />\n      <Card.Content>\n        {props.entry.person.facts?.map((fact) => (\n          <FactDescription fact={fact} />\n        ))}\n      </Card.Content>\n      <Card.Content>\n        {props.entry.parents ? (\n          <p>\n            <b>Parents: </b>\n            {props.entry.parents?.map((person) => (\n              <PersonLink person={person} />\n            ))}\n          </p>\n        ) : null}\n        {props.entry.spouses ? (\n          <p>\n            <b>Spouses: </b>\n            {props.entry.spouses?.map((person) => (\n              <PersonLink person={person} />\n            ))}\n          </p>\n        ) : null}\n        {props.entry.children ? (\n          <p>\n            <b>Children: </b>\n            {props.entry.children?.map((person) => (\n              <PersonLink person={person} />\n            ))}\n          </p>\n        ) : null}\n        {props.entry.siblings ? (\n          <p>\n            <b>Siblings: </b>\n            {props.entry.siblings?.map((person) => (\n              <PersonLink person={person} />\n            ))}\n          </p>\n        ) : null}\n      </Card.Content>\n      <Card.Content extra>\n        <a href={props.entry.page.url}>\n          <img\n            src={props.entry.page.favicon}\n            style={{ width: 16, height: 16, marginRight: 5 }}\n          />\n          {getDomain(props.entry.page.url)}\n        </a>\n      </Card.Content>\n    </Card>\n  );\n}\n\nfunction addToMultiMap<K, V>(map: Map<K, V[]>, key: K, value: V) {\n  const list = map.get(key) || [];\n  list.push(value);\n  map.set(key, list);\n}\n\n/**\n * Displays one PersonEntry per person together with their closest family,\n * i.e. parents, children and siblings. Seperate entries are not displayed\n * for people included as close family.\n */\nfunction Entry(props: { entry: DataEntry }) {\n  const children = new Map<string, string[]>();\n  const parents = new Map<string, string[]>();\n  const spouses = new Map<string, string[]>();\n  props.entry.data.relationships?.forEach((relationship) => {\n    const p1 = relationship.person1.resource.substring(1);\n    const p2 = relationship.person2.resource.substring(1);\n    if (relationship.type === 'http://gedcomx.org/Couple') {\n      addToMultiMap(spouses, p1, p2);\n      addToMultiMap(spouses, p2, p1);\n    } else if (relationship.type === 'http://gedcomx.org/ParentChild') {\n      addToMultiMap(children, p1, p2);\n      addToMultiMap(parents, p2, p1);\n    }\n  });\n  const nonUniqueSiblings = new Map<string, string[]>();\n  children.forEach((value) =>\n    value.forEach((child) =>\n      value.forEach((person) => {\n        if (child !== person) {\n          addToMultiMap(nonUniqueSiblings, child, person);\n        }\n      })\n    )\n  );\n  const siblings = new Map<string, string[]>();\n  nonUniqueSiblings.forEach((value, key) =>\n    siblings.set(key, Array.from(new Set(value)))\n  );\n\n  const seen = new Set<string>();\n  const personEntries: PersonEntry[] = [];\n\n  const people = new Map<string, Person>();\n  props.entry.data.persons?.forEach((person) => people.set(person.id, person));\n\n  props.entry.data.persons?.forEach((person) => {\n    if (seen.has(person.id)) {\n      return;\n    }\n    const entry: PersonEntry = {\n      page: props.entry.page,\n      person,\n      children: children\n        .get(person.id)\n        ?.map((id) => people.get(id)!)\n        .filter((x) => !!x),\n      parents: parents\n        .get(person.id)\n        ?.map((id) => people.get(id)!)\n        .filter((x) => !!x),\n      spouses: spouses\n        .get(person.id)\n        ?.map((id) => people.get(id)!)\n        .filter((x) => !!x),\n      siblings: siblings\n        .get(person.id)\n        ?.map((id) => people.get(id)!)\n        .filter((x) => !!x),\n    };\n    entry.children?.forEach((x) => seen.add(x.id));\n    entry.parents?.forEach((x) => seen.add(x.id));\n    entry.spouses?.forEach((x) => seen.add(x.id));\n    entry.siblings?.forEach((x) => seen.add(x.id));\n    seen.add(person.id);\n    personEntries.push(entry);\n  });\n\n  return (\n    <>\n      {personEntries.map((entry) => (\n        <PersonEntryDescription entry={entry} key={entry.person.id} />\n      ))}\n    </>\n  );\n}\n\n/** Main application component displaying the list of person entries. */\nfunction App() {\n  const [list, setList] = useState<DataEntry[]>([]);\n\n  useEffect(() => setList(retrieveList()), []);\n\n  function handleStorageEvent(event: StorageEvent) {\n    if (event.key === 'list') {\n      setList(retrieveList());\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('storage', handleStorageEvent);\n    return () => window.removeEventListener('storage', handleStorageEvent);\n  }, [handleStorageEvent]);\n\n  function handleClear() {\n    storeList([]);\n    setList([]);\n  }\n\n  console.log('#B');\n  return (\n    <>\n      <h1>Genealogy Snippets</h1>\n      <Button color=\"red\" onClick={handleClear}>\n        Clear all\n      </Button>\n      {list.map((entry) => (\n        <Entry entry={entry} key={entry.page.url} />\n      ))}\n    </>\n  );\n}\n\n/**\n * Handles communication with the browser extension.\n * The extension opens this view in an iframe.\n */\nfunction ExtensionIframe() {\n  /** Adds data to list sent from extension. */\n  function handleMessage(event: MessageEvent<ExtensionMessage>) {\n    const list = retrieveList();\n    const urls = list.map((entry) => entry.page.url);\n    let added = false;\n    for (const data of event.data.data) {\n      if (!urls.includes(data.page.url)) {\n        list.push(data);\n        added = true;\n      }\n    }\n    storeList(list);\n    // Respond to extension whether the data was added or not.\n    window.parent.postMessage({ response: added ? 'added' : 'not_added' }, '*');\n  }\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, []);\n\n  return <h1>Extension iframe</h1>;\n}\n\nconsole.log('#A');\nrender(\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"extension-iframe\" element={<ExtensionIframe />} />\n    </Routes>\n  </BrowserRouter>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}